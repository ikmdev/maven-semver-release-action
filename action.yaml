name: SemVer Release Version
description: Utilized for creating releases of projects

# Inputs
inputs:
  version_type:
    description: "Version type to increment (major, minor, patch)"
    required: true
    default: 'minor'
  ikmdevops_pat:
    description: "PAT TOKEN for IKMDevops User"
    required: true
  ikmdevops_email:
    description: "Email For IKMDevops User"
    default: 'devops@ikm.dev'
  github_token:
    description: "GitHub Token"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{inputs.ikmdevops_pat}}

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '21'

    - name: Extract Version
      id: get_current_version
      shell: bash
      run: |
          echo "POM_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

    - name: Print Maven POM project version
      shell: bash
      run: |
        echo "version = ${{ steps.get_current_version.outputs.POM_VERSION }}"

    - name: Verify Is SNAPSHOT Version
      if: ${{ !contains(steps.get_current_version.outputs.POM_VERSION, '-SNAPSHOT')}}
      shell: bash
      run: |
        echo "ERROR: Version is set to incompatible version ${{steps.get_current_version.outputs.POM_VERSION}}. Only SNAPSHOT development versions can be converted to a release version."
        exit 1

    - name: Split version code
      uses: xom9ikk/split@v1.1
      id: splitCurrentVersion
      with:
        string: ${{steps.get_current_version.outputs.POM_VERSION}}
        separator: '-'
        limit: -1

    - name: Configure Version Type
      id: configure_version_type
      shell: bash
      run: |
         if [ $RELEASE_TYPE == 'major' ]; then 
          echo "version_type=0" >> $GITHUB_OUTPUT
         elif [ $RELEASE_TYPE == 'minor' ]; then
          echo "version_type=1" >> $GITHUB_OUTPUT
         elif [ $RELEASE_TYPE == 'patch' ]; then
          echo "version_type=2" >> $GITHUB_OUTPUT
         else
          echo "ERROR: Invalid version_type '${{ inputs.version_type }}'."
          exit 1
         fi
      env:
        RELEASE_TYPE: ${{inputs.version_type}}

    - name: GitFlow Release
      id: gitflow_release
      shell: bash
      run: |
          mvn gitflow:release \
                -DversionDigitToIncrement=${{ steps.configure_version_type.version_type }} \
                -DpostReleaseGoals="clean install \
                      --batch-mode \
                      -e \
                      -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
                      -PcodeQuality,release-enforcement \
                      -Dmaven.build.cache.enabled=false"

    - name: Create Release
      shell: bash
      id: create_release
      run: |
          curl -L \
           -X POST \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{inputs.github_token}}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
           https://api.github.com/repos/${{github.repository}}/releases \
          -d '{"tag_name":"${{steps.splitCurrentVersion.outputs._0}}","name":"Release ${{steps.splitCurrentVersion.outputs._0}}","body":"Release ${{steps.splitCurrentVersion.outputs._0}}","draft":false,"prerelease":false,"generate_release_notes":false}'
